{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\github-finder\\\\src\\\\context\\\\github\\\\GithubContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useReducer } from \"react\";\nimport githubReducer from \"./GithubReducer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GithubContext = /*#__PURE__*/createContext();\nconst GITHUB_URL = process.env.REACT_APP_GITHUB_URL;\nconst GITHUB_TOKEN = process.env.REACT_APP_GITHUB_TOKEN;\nexport const GithubProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const initialState = {\n    users: [],\n    loading: false\n  };\n  const [state, dispatch] = useReducer(githubReducer, initialState); // Get Search users (testing purposes)\n\n  const searchUsers = async text => {\n    setLoading();\n    const params = new URLSearchParams({\n      q: text\n    });\n    const response = await fetch(`${GITHUB_URL}/search/users?${params}`, {\n      headers: {\n        Authorization: `token ${GITHUB_TOKEN}`\n      }\n    });\n    const {\n      items\n    } = await response.json();\n    dispatch({\n      type: 'GET_USERS',\n      payload: items\n    });\n  }; // clear users\n\n\n  const clearUsers = () => dispatch({\n    type: 'CLEAR_USERS'\n  }); // set loading\n\n\n  const setLoading = () => dispatch({\n    type: 'SET_LOADING'\n  });\n\n  return /*#__PURE__*/_jsxDEV(GithubContext.Provider, {\n    value: {\n      users: state.users,\n      loading: state.loading,\n      searchUsers\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 12\n  }, this);\n};\n\n_s(GithubProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = GithubProvider;\nexport default GithubContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"GithubProvider\");","map":{"version":3,"sources":["D:/Projects/github-finder/src/context/github/GithubContext.js"],"names":["createContext","useReducer","githubReducer","GithubContext","GITHUB_URL","process","env","REACT_APP_GITHUB_URL","GITHUB_TOKEN","REACT_APP_GITHUB_TOKEN","GithubProvider","children","initialState","users","loading","state","dispatch","searchUsers","text","setLoading","params","URLSearchParams","q","response","fetch","headers","Authorization","items","json","type","payload","clearUsers"],"mappings":";;;AAAA,SAASA,aAAT,EAAyBC,UAAzB,QAA4C,OAA5C;AACA,OAAOC,aAAP,MAA0B,iBAA1B;;AAIA,MAAMC,aAAa,gBAAEH,aAAa,EAAlC;AAEA,MAAMI,UAAU,GAAGC,OAAO,CAACC,GAAR,CAAYC,oBAA/B;AACA,MAAMC,YAAY,GAAGH,OAAO,CAACC,GAAR,CAAYG,sBAAjC;AAEA,OAAO,MAAMC,cAAc,GAAG,QAAiB;AAAA;;AAAA,MAAhB;AAACC,IAAAA;AAAD,GAAgB;AAE3C,QAAMC,YAAY,GAAE;AAChBC,IAAAA,KAAK,EAAE,EADS;AAEhBC,IAAAA,OAAO,EAAE;AAFO,GAApB;AAKA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAqBf,UAAU,CAACC,aAAD,EAAeU,YAAf,CAArC,CAP2C,CAU3C;;AAEA,QAAMK,WAAW,GAAG,MAAOC,IAAP,IAAgB;AAChCC,IAAAA,UAAU;AAEV,UAAMC,MAAM,GAAG,IAAIC,eAAJ,CAAoB;AAC/BC,MAAAA,CAAC,EAACJ;AAD6B,KAApB,CAAf;AAKA,UAAMK,QAAQ,GAAG,MAAMC,KAAK,CAAG,GAAEpB,UAAW,iBAAgBgB,MAAO,EAAvC,EAAyC;AACjEK,MAAAA,OAAO,EAAE;AACLC,QAAAA,aAAa,EAAG,SAAQlB,YAAa;AADhC;AADwD,KAAzC,CAA5B;AAMA,UAAM;AAACmB,MAAAA;AAAD,QAAU,MAAMJ,QAAQ,CAACK,IAAT,EAAtB;AAEAZ,IAAAA,QAAQ,CAAC;AACLa,MAAAA,IAAI,EAAE,WADD;AAELC,MAAAA,OAAO,EAAEH;AAFJ,KAAD,CAAR;AAKP,GArBG,CAZ2C,CAkC/C;;;AACI,QAAMI,UAAU,GAAG,MAAMf,QAAQ,CAAC;AAACa,IAAAA,IAAI,EAAC;AAAN,GAAD,CAAjC,CAnC2C,CAuC/C;;;AAEI,QAAMV,UAAU,GAAG,MAAMH,QAAQ,CAAE;AAACa,IAAAA,IAAI,EAAC;AAAN,GAAF,CAAjC;;AAIA,sBAAO,QAAC,aAAD,CAAe,QAAf;AACC,IAAA,KAAK,EAAE;AACHhB,MAAAA,KAAK,EAAEE,KAAK,CAACF,KADV;AAEHC,MAAAA,OAAO,EAAEC,KAAK,CAACD,OAFZ;AAGHG,MAAAA;AAHG,KADR;AAAA,cAOFN;AAPE;AAAA;AAAA;AAAA;AAAA,UAAP;AAUH,CAvDM;;GAAMD,c;;KAAAA,c;AAyDb,eAAeP,aAAf","sourcesContent":["import { createContext,  useReducer  } from \"react\";\r\nimport githubReducer from \"./GithubReducer\";\r\n\r\n\r\n\r\nconst GithubContext =createContext()\r\n\r\nconst GITHUB_URL = process.env.REACT_APP_GITHUB_URL\r\nconst GITHUB_TOKEN = process.env.REACT_APP_GITHUB_TOKEN\r\n\r\nexport const GithubProvider = ({children})  => {\r\n    \r\n    const initialState ={\r\n        users: [],\r\n        loading: false,\r\n    }\r\n\r\n    const [state, dispatch]  = useReducer(githubReducer,initialState)\r\n\r\n\r\n    // Get Search users (testing purposes)\r\n\r\n    const searchUsers = async (text) => {\r\n        setLoading()\r\n\r\n        const params = new URLSearchParams({\r\n            q:text \r\n        })\r\n\r\n\r\n        const response = await fetch (`${GITHUB_URL}/search/users?${params}`,{\r\n            headers: {\r\n                Authorization: `token ${GITHUB_TOKEN}`\r\n            },\r\n        })\r\n\r\n        const {items} = await response.json()\r\n\r\n        dispatch({\r\n            type: 'GET_USERS',\r\n            payload: items,\r\n        })\r\n\r\n}\r\n// clear users\r\n    const clearUsers = () => dispatch({type:'CLEAR_USERS'})\r\n\r\n\r\n\r\n// set loading\r\n\r\n    const setLoading = () => dispatch ({type:'SET_LOADING'})\r\n\r\n\r\n\r\n    return <GithubContext.Provider \r\n            value={{\r\n                users: state.users,\r\n                loading: state.loading,\r\n                searchUsers,\r\n            }}\r\n    >\r\n        {children}\r\n    </GithubContext.Provider>\r\n\r\n}\r\n\r\nexport default GithubContext"]},"metadata":{},"sourceType":"module"}