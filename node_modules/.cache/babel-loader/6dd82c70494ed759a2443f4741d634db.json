{"ast":null,"code":"import _objectSpread from\"D:/Projects/github-finder/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _asyncToGenerator from\"D:/Projects/github-finder/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"D:/Projects/github-finder/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _regeneratorRuntime from\"D:\\\\Projects\\\\github-finder\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";import{createContext,useReducer}from\"react\";import githubReducer from\"./GithubReducer\";import{jsx as _jsx}from\"react/jsx-runtime\";var GithubContext=/*#__PURE__*/createContext();var GITHUB_URL=process.env.REACT_APP_GITHUB_URL;var GITHUB_TOKEN=process.env.REACT_APP_GITHUB_TOKEN;export var GithubProvider=function GithubProvider(_ref){var children=_ref.children;var initialState={users:[],loading:false};var _useReducer=useReducer(githubReducer,initialState),_useReducer2=_slicedToArray(_useReducer,2),state=_useReducer2[0],dispatch=_useReducer2[1];// Get Search users (testing purposes)\nvar searchUsers=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(text){var params,response,_yield$response$json,items;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:setLoading();params=new URLSearchParams({q:text});_context.next=4;return fetch(\"\".concat(GITHUB_URL,\"/search/users?\").concat(params),{headers:{Authorization:\"token \".concat(GITHUB_TOKEN)}});case 4:response=_context.sent;_context.next=7;return response.json();case 7:_yield$response$json=_context.sent;items=_yield$response$json.items;dispatch({type:'GET_USERS',payload:items});case 10:case\"end\":return _context.stop();}}},_callee);}));return function searchUsers(_x){return _ref2.apply(this,arguments);};}();// get single search user\n// clear users\nvar clearUsers=function clearUsers(){return dispatch({type:'CLEAR_USERS'});};// set loading\nvar setLoading=function setLoading(){return dispatch({type:'SET_LOADING'});};return/*#__PURE__*/_jsx(GithubContext.Provider,{value:_objectSpread(_objectSpread({},state),{},{searchUsers:searchUsers,clearUsers:clearUsers}),children:children});};export default GithubContext;","map":{"version":3,"sources":["D:/Projects/github-finder/src/context/github/GithubContext.js"],"names":["createContext","useReducer","githubReducer","GithubContext","GITHUB_URL","process","env","REACT_APP_GITHUB_URL","GITHUB_TOKEN","REACT_APP_GITHUB_TOKEN","GithubProvider","children","initialState","users","loading","state","dispatch","searchUsers","text","setLoading","params","URLSearchParams","q","fetch","headers","Authorization","response","json","items","type","payload","clearUsers"],"mappings":"qcAAA,OAASA,aAAT,CAAyBC,UAAzB,KAA4C,OAA5C,CACA,MAAOC,CAAAA,aAAP,KAA0B,iBAA1B,C,2CAIA,GAAMC,CAAAA,aAAa,cAAEH,aAAa,EAAlC,CAEA,GAAMI,CAAAA,UAAU,CAAGC,OAAO,CAACC,GAAR,CAAYC,oBAA/B,CACA,GAAMC,CAAAA,YAAY,CAAGH,OAAO,CAACC,GAAR,CAAYG,sBAAjC,CAEA,MAAO,IAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,MAAiB,IAAfC,CAAAA,QAAe,MAAfA,QAAe,CAE3C,GAAMC,CAAAA,YAAY,CAAE,CAChBC,KAAK,CAAE,EADS,CAEhBC,OAAO,CAAE,KAFO,CAApB,CAKA,gBAA2Bb,UAAU,CAACC,aAAD,CAAeU,YAAf,CAArC,4CAAOG,KAAP,iBAAcC,QAAd,iBAGJ;AAEI,GAAMC,CAAAA,WAAW,2FAAG,iBAAOC,IAAP,iKAChBC,UAAU,GAEJC,MAHU,CAGD,GAAIC,CAAAA,eAAJ,CAAoB,CAC/BC,CAAC,CAACJ,IAD6B,CAApB,CAHC,uBAQOK,CAAAA,KAAK,WAAKnB,UAAL,0BAAgCgB,MAAhC,EAAyC,CACjEI,OAAO,CAAE,CACLC,aAAa,iBAAWjB,YAAX,CADR,CADwD,CAAzC,CARZ,QAQVkB,QARU,qCAcMA,CAAAA,QAAQ,CAACC,IAAT,EAdN,2CAcTC,KAdS,sBAcTA,KAdS,CAgBhBZ,QAAQ,CAAC,CACLa,IAAI,CAAE,WADD,CAELC,OAAO,CAAEF,KAFJ,CAAD,CAAR,CAhBgB,uDAAH,kBAAXX,CAAAA,WAAW,6CAAjB,CAsBH;AAGD;AACI,GAAMc,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,SAAMf,CAAAA,QAAQ,CAAC,CAACa,IAAI,CAAC,aAAN,CAAD,CAAd,EAAnB,CAIJ;AAEI,GAAMV,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,SAAMH,CAAAA,QAAQ,CAAE,CAACa,IAAI,CAAC,aAAN,CAAF,CAAd,EAAnB,CAIA,mBAAO,KAAC,aAAD,CAAe,QAAf,EACC,KAAK,gCACEd,KADF,MAEDE,WAAW,CAAXA,WAFC,CAGDc,UAAU,CAAVA,UAHC,EADN,UAOFpB,QAPE,EAAP,CAUH,CA1DM,CA6DP,cAAeR,CAAAA,aAAf","sourcesContent":["import { createContext,  useReducer  } from \"react\";\r\nimport githubReducer from \"./GithubReducer\";\r\n\r\n\r\n\r\nconst GithubContext =createContext()\r\n\r\nconst GITHUB_URL = process.env.REACT_APP_GITHUB_URL\r\nconst GITHUB_TOKEN = process.env.REACT_APP_GITHUB_TOKEN\r\n\r\nexport const GithubProvider = ({children})  => {\r\n    \r\n    const initialState ={\r\n        users: [],\r\n        loading: false,\r\n    }\r\n\r\n    const [state, dispatch]  = useReducer(githubReducer,initialState)\r\n\r\n\r\n// Get Search users (testing purposes)\r\n\r\n    const searchUsers = async (text) => {\r\n        setLoading()\r\n\r\n        const params = new URLSearchParams({\r\n            q:text \r\n        })\r\n\r\n\r\n        const response = await fetch (`${GITHUB_URL}/search/users?${params}`,{\r\n            headers: {\r\n                Authorization: `token ${GITHUB_TOKEN}`\r\n            },\r\n        })\r\n\r\n        const {items} = await response.json()\r\n\r\n        dispatch({\r\n            type: 'GET_USERS',\r\n            payload: items,\r\n        })\r\n\r\n}\r\n // get single search user\r\n\r\n\r\n// clear users\r\n    const clearUsers = () => dispatch({type:'CLEAR_USERS'})\r\n\r\n\r\n\r\n// set loading\r\n\r\n    const setLoading = () => dispatch ({type:'SET_LOADING'})\r\n\r\n\r\n\r\n    return <GithubContext.Provider \r\n            value={{\r\n                ...state,\r\n                searchUsers,\r\n                clearUsers, \r\n            }}\r\n    >\r\n        {children}\r\n    </GithubContext.Provider>\r\n\r\n}\r\n\r\n\r\nexport default GithubContext"]},"metadata":{},"sourceType":"module"}